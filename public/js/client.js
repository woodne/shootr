// Generated by CoffeeScript 1.3.3
(function() {
  var Arena, Player, socket;

  socket = null;

  Player = (function() {

    function Player(x, y, id, username) {
      this.x = x;
      this.y = y;
      this.id = id;
      this.username = username;
      this.color = "red";
      return;
    }

    return Player;

  })();

  Arena = (function() {

    function Arena(element, w, h) {
      this._init(element);
    }

    Arena.prototype._init = function(element) {
      var _this = this;
      if (!(typeof io !== "undefined" && io !== null)) {
        console.log('Socket.io not initialized!');
      }
      if (!(element != null)) {
        throw "Failed to initialize arena";
      }
      this.players = [];
      socket = io.connect('http://localhost:6543');
      socket.on('add', function(data) {
        return _this.players.push(new Player(data.x, data.y, data.id, data.username));
      });
      socket.on('init', function(data) {
        var p, _i, _len, _ref, _results;
        _ref = data.players;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          p = _ref[_i];
          _results.push(_this.players.push(new Player(p.x, p.y, p.id, p.username)));
        }
        return _results;
      });
      socket.on('update', function(data) {});
      this.canvasSelector = $('<canvas/>').attr('width', window.innerWidth).attr('height', window.innerHeight).css('background-color', 'black  ');
      this.canvas = this.canvasSelector[0];
      $(window).resize(function() {
        _this.canvas.width = window.innerWidth;
        return _this.canvas.height = window.innerHeight;
      });
      element.append(this.canvas);
      $(document).bind('keydown', 'left', function() {
        return thisPlayer.x -= 1;
      });
      return $(document).bind('keydown', 'right', function() {
        return thisPlayer.x += 1;
      });
    };

    Arena.prototype.getCtx = function() {
      return this.canvas.getContext('2d');
    };

    Arena.prototype.addPlayer = function(player) {
      return this.players.append(player);
    };

    Arena.prototype.renderWorld = function(ctx) {
      var player, _i, _len, _ref, _results;
      ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
      _ref = this.players;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        player = _ref[_i];
        ctx.fillStyle = player.color;
        _results.push(ctx.fillRect(player.x, player.x, 10, 10));
      }
      return _results;
    };

    return Arena;

  })();

  if (typeof window !== "undefined" && window !== null) {
    window.loadArena = function(element) {
      return new Arena(element);
    };
  }

  module.exports = {
    Arena: Arena,
    Player: Player
  };

}).call(this);
