// Generated by CoffeeScript 1.3.3
(function() {
  var Arena, Player;

  Player = (function() {

    function Player(x, y) {
      this.x = x;
      this.y = y;
      this.color = "red";
      return;
    }

    return Player;

  })();

  Arena = (function() {

    function Arena(element, w, h) {
      this._init(element);
    }

    Arena.prototype._init = function(element) {
      var _this = this;
      if (!(element != null)) {
        throw "Failed to initialize arena";
      }
      this.canvasSelector = $('<canvas/>').attr('width', window.innerWidth).attr('height', window.innerHeight).css('background-color', 'black  ');
      this.canvas = this.canvasSelector[0];
      $(window).resize(function() {
        _this.canvas.width = window.innerWidth;
        return _this.canvas.height = window.innerHeight;
      });
      element.append(this.canvas);
      return this.players = [new Player(50, 50)];
    };

    Arena.prototype.getCtx = function() {
      return this.canvas.getContext('2d');
    };

    Arena.prototype.addPlayer = function(player) {
      return this.players.append(player);
    };

    Arena.prototype.renderWorld = function(ctx) {
      var player, _i, _len, _ref, _results;
      ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
      this.updateWorld();
      _ref = this.players;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        player = _ref[_i];
        ctx.fillStyle = player.color;
        _results.push(ctx.fillRect(player.x, player.x, 10, 10));
      }
      return _results;
    };

    Arena.prototype.updateWorld = function() {
      var player, _i, _len, _ref, _results;
      _ref = this.players;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        player = _ref[_i];
        player.x += 1;
        player.y += 1;
        if (player.x > 100) {
          player.x = 0;
        }
        if (player.y > 100) {
          _results.push(player.y = 0);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    return Arena;

  })();

  window.loadArena = function(element) {
    return new Arena(element);
  };

}).call(this);
