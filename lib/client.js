// Generated by CoffeeScript 1.4.0
var Arena, Camera, Direction, Padding, Player, World;

Direction = {
  HORIZONTAL: 0,
  VERTICAL: 1
};

Padding = {
  TOP: 20,
  LEFT: 20
};

Player = (function() {

  function Player(x, y, id, username, rotation, velocity) {
    this.x = x;
    this.y = y;
    this.id = id;
    this.username = username;
    this.rotation = rotation != null ? rotation : 0;
    this.velocity = velocity != null ? velocity : {
      x: 0,
      y: 0
    };
    this.maxVelocity = 10;
    this.color = '#' + Math.floor(Math.random() * 16777215).toString(16);
    return;
  }

  return Player;

})();

World = (function() {

  function World(x1, x2, y1, y2) {
    this.x1 = x1 != null ? x1 : 0;
    this.x2 = x2 != null ? x2 : 3000;
    this.y1 = y1 != null ? y1 : 0;
    this.y2 = y2 != null ? y2 : 2000;
    return;
  }

  World.prototype.height = function() {
    return this.y2 - this.y1;
  };

  World.prototype.width = function() {
    return this.x2 - this.x1;
  };

  return World;

})();

Camera = (function() {

  function Camera(world) {
    this.world = world;
    this.left = 20;
    this.top = 20;
    this.updateViewBounds();
    return;
  }

  Camera.prototype.transform = function(x, y) {
    var xV, yV;
    xV = (this.right - this.left) / (this.world.x2 - this.world.x1) * (x - this.world.x1) + this.left;
    yV = (this.top - this.bottom) / (this.world.y1 - this.world.y2) * (y - this.world.y1) + this.top;
    return [xV, yV];
  };

  Camera.prototype.updateViewBounds = function() {
    this.right = this.left + window.innerWidth;
    this.bottom = this.top + window.innerHeight;
    return console.log([this.left, this.right, this.top, this.bottom]);
  };

  Camera.prototype.getViewBounds = function() {
    return [this.left, this.right, this.top, this.bottom];
  };

  Camera.prototype.adjustViewBounds = function(direction, delta) {
    switch (direction) {
      case Direction.VERTICAL:
        this.top += delta;
        return this.bottom += delta;
      case Direction.HORIZONTAL:
        this.left += delta;
        return this.right += delta;
    }
  };

  return Camera;

})();

Arena = (function() {

  function Arena(element, w, h) {
    this._init(element);
  }

  Arena.prototype._init = function(element) {
    var _this = this;
    if (!(typeof io !== "undefined" && io !== null)) {
      console.log('@socket.io not initialized!');
    }
    if (!(element != null)) {
      throw "Failed to initialize arena";
    }
    this.players = new Object;
    this.frame = 0;
    this.socket = io.connect('http://localhost:6543');
    this.world = new World;
    this.camera = new Camera(this.world);
    this.socket.on('add', function(data) {
      var player;
      player = data.player;
      return _this.players[data.id] = new Player(player.x, player.y, player.id, player.username);
    });
    this.socket.on('remove', function(data) {
      return delete _this.players[data.id];
    });
    this.socket.on('init', function(data) {
      var id, p, players, _results;
      _this.id = data.id;
      players = JSON.parse(data.players);
      _results = [];
      for (id in players) {
        p = players[id];
        _results.push(_this.players[id] = new Player(p.x, p.y, p.id, p.username));
      }
      return _results;
    });
    this.socket.on('update', function(data) {
      _this.players[data.id].x += data.deltaX;
      return _this.players[data.id].y += data.deltaY;
    });
    this.socket.on('pong', function(data) {
      return _this.curPing = (new Date).getTime() - data.time;
    });
    this.canvasSelector = $('<canvas/>').attr('width', window.innerWidth).attr('height', window.innerHeight).css('background-color', 'black  ');
    this.canvas = this.canvasSelector[0];
    $(window).resize(function() {
      _this.canvas.width = window.innerWidth;
      _this.canvas.height = window.innerHeight;
      return _this.camera.updateViewBounds();
    });
    element.append(this.canvas);
    window.setInterval((function() {
      return _this.socket.emit('ping', {
        time: (new Date).getTime()
      });
    }), 3000);
    return $(document).bind('keydown', function(event) {
      switch (event.which) {
        case 37:
          event.preventDefault();
          return _this.socket.emit('move', {
            direction: "left",
            id: _this.id
          });
        case 38:
          event.preventDefault();
          return _this.socket.emit('move', {
            direction: "up",
            id: _this.id
          });
        case 39:
          event.preventDefault();
          return _this.socket.emit('move', {
            direction: "right",
            id: _this.id
          });
        case 40:
          event.preventDefault();
          return _this.socket.emit('move', {
            direction: "down",
            id: _this.id
          });
        case 65:
          return _this.camera.adjustViewBounds(Direction.HORIZONTAL, -5);
        case 87:
          return _this.camera.adjustViewBounds(Direction.VERTICAL, -5);
        case 68:
          return _this.camera.adjustViewBounds(Direction.HORIZONTAL, 5);
        case 83:
          return _this.camera.adjustViewBounds(Direction.VERTICAL, 5);
      }
    });
  };

  Arena.prototype.getCtx = function() {
    return this.canvas.getContext('2d');
  };

  Arena.prototype.addPlayer = function(player) {
    return this.players.append(player);
  };

  Arena.prototype.updateWorld = function() {};

  Arena.prototype.renderWorld = function(ctx) {
    var id, player, x, y, _ref, _ref1, _ref2, _results;
    ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
    _ref = this.camera.transform(0, 0), x = _ref[0], y = _ref[1];
    ctx.strokeStyle = "white";
    ctx.strokeRect(x, y, this.world.width(), this.world.height());
    _ref1 = this.players;
    _results = [];
    for (id in _ref1) {
      player = _ref1[id];
      _ref2 = this.camera.transform(player.x, player.y), x = _ref2[0], y = _ref2[1];
      if (this.id === id) {
        ctx.fillStyle = 'white';
        ctx.fillText("You : " + (this.curPing != null ? this.curPing : '-1') + "ms", x, y + 20);
      }
      ctx.fillStyle = player.color;
      _results.push(ctx.fillRect(x, y, 10, 10));
    }
    return _results;
  };

  return Arena;

})();

if (typeof window !== "undefined" && window !== null) {
  window.loadArena = function(element) {
    return new Arena(element);
  };
}

if (typeof module !== "undefined" && module !== null) {
  module.exports = {
    Arena: Arena,
    Player: Player
  };
}
