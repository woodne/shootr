// Generated by CoffeeScript 1.4.0
var Arena, Player;

this.socket = null;

Player = (function() {

  function Player(x, y, id, username, velocity) {
    this.x = x;
    this.y = y;
    this.id = id;
    this.username = username;
    this.velocity = velocity != null ? velocity : {
      x: 0,
      y: 0
    };
    this.maxVelocity = 10;
    this.color = '#' + Math.floor(Math.random() * 16777215).toString(16);
    return;
  }

  return Player;

})();

Arena = (function() {

  function Arena(element, w, h) {
    this._init(element);
  }

  Arena.prototype._init = function(element) {
    var _this = this;
    if (!(typeof io !== "undefined" && io !== null)) {
      console.log('@socket.io not initialized!');
    }
    if (!(element != null)) {
      throw "Failed to initialize arena";
    }
    this.players = new Object;
    this.frame = 0;
    this.socket = io.connect('http://localhost:6543');
    this.socket.on('add', function(data) {
      var player;
      player = data.player;
      return _this.players[data.id] = new Player(player.x, player.y, player.id, player.username);
    });
    this.socket.on('remove', function(data) {
      return delete _this.players[data.id];
    });
    this.socket.on('init', function(data) {
      var id, p, players, _results;
      _this.id = data.id;
      players = JSON.parse(data.players);
      _results = [];
      for (id in players) {
        p = players[id];
        _results.push(_this.players[id] = new Player(p.x, p.y, p.id, p.username));
      }
      return _results;
    });
    this.socket.on('update', function(data) {
      _this.players[data.id].x += data.deltaX;
      return _this.players[data.id].y += data.deltaY;
    });
    this.socket.on('pong', function(data) {
      return _this.curPing = (new Date).getTime() - data.time;
    });
    this.canvasSelector = $('<canvas/>').attr('width', window.innerWidth).attr('height', window.innerHeight).css('background-color', 'black  ');
    this.canvas = this.canvasSelector[0];
    $(window).resize(function() {
      _this.canvas.width = window.innerWidth;
      return _this.canvas.height = window.innerHeight;
    });
    element.append(this.canvas);
    return $(document).bind('keydown', function(event) {
      switch (event.which) {
        case 37:
          event.preventDefault();
          return _this.socket.emit('move', {
            direction: "left",
            id: _this.id
          });
        case 38:
          event.preventDefault();
          return _this.socket.emit('move', {
            direction: "up",
            id: _this.id
          });
        case 39:
          event.preventDefault();
          return _this.socket.emit('move', {
            direction: "right",
            id: _this.id
          });
        case 40:
          event.preventDefault();
          return _this.socket.emit('move', {
            direction: "down",
            id: _this.id
          });
      }
    });
  };

  Arena.prototype.getCtx = function() {
    return this.canvas.getContext('2d');
  };

  Arena.prototype.addPlayer = function(player) {
    return this.players.append(player);
  };

  Arena.prototype.updateWorld = function() {
    if (this.frame === 0) {
      this.socket.emit('ping', {
        time: (new Date).getTime()
      });
    }
    this.frame = (this.frame + 1) % 30;
  };

  Arena.prototype.renderWorld = function(ctx) {
    var id, player, _ref, _results;
    ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
    _ref = this.players;
    _results = [];
    for (id in _ref) {
      player = _ref[id];
      if (this.id === id) {
        ctx.fillStyle = 'white';
        ctx.fillText("You : " + this.curPing + "ms", player.x, player.y + 20);
      }
      ctx.fillStyle = player.color;
      _results.push(ctx.fillRect(player.x, player.y, 10, 10));
    }
    return _results;
  };

  return Arena;

})();

if (typeof window !== "undefined" && window !== null) {
  window.loadArena = function(element) {
    return new Arena(element);
  };
}

if (typeof module !== "undefined" && module !== null) {
  module.exports = {
    Arena: Arena,
    Player: Player
  };
}
